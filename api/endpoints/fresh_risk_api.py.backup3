# This is what your fresh_risk_api.py should look like
# Replace the content of api/endpoints/fresh_risk_api.py with this

from fastapi import APIRouter, HTTPException
from typing import Dict, Any
import logging
import time

# Import your centralized models
try:
    from models.requests import RiskAnalysisRequest
    from models.responses import RiskAnalysisResponse
    CENTRALIZED_MODELS_AVAILABLE = True
except ImportError:
    CENTRALIZED_MODELS_AVAILABLE = False

# Import your risk service
try:
    from services.risk_service_updated import RiskAnalysisService
    RISK_SERVICE_AVAILABLE = True
except ImportError:
    RISK_SERVICE_AVAILABLE = False

logger = logging.getLogger(__name__)

# Create the router (NOT FastAPI app)
router = APIRouter(prefix="/api/risk", tags=["risk"])

# Initialize service if available
risk_service = None
if RISK_SERVICE_AVAILABLE:
    try:
        risk_service = RiskAnalysisService()
        logger.info("✅ Risk service initialized successfully")
    except Exception as e:
        logger.error(f"❌ Failed to initialize risk service: {e}")

@router.get("/health")
async def risk_health():
    """Risk service health check"""
    return {
        "service": "risk_analysis",
        "status": "healthy" if RISK_SERVICE_AVAILABLE and risk_service else "degraded",
        "centralized_models": CENTRALIZED_MODELS_AVAILABLE,
        "timestamp": time.time()
    }

@router.post("/analyze")
async def analyze_risk(request_data: Dict[str, Any]):
    """Risk analysis endpoint"""
    
    if not risk_service:
        raise HTTPException(
            status_code=503, 
            detail="Risk service not available"
        )
    
    try:
        # Handle centralized models if available
        if CENTRALIZED_MODELS_AVAILABLE:
            # Parse with centralized model
            parsed_request = RiskAnalysisRequest(**request_data)
            
            # Call service with parsed data
            result = risk_service.comprehensive_risk_analysis(
                symbols=parsed_request.symbols,
                period=parsed_request.period.value if hasattr(parsed_request.period, 'value') else str(parsed_request.period),
                analysis_type=parsed_request.analysis_type.value if hasattr(parsed_request.analysis_type, 'value') else str(parsed_request.analysis_type),
                confidence_level=parsed_request.confidence_level,
                use_real_data=parsed_request.use_real_data
            )
            
        else:
            # Fallback to raw dictionary handling
            result = risk_service.comprehensive_risk_analysis(
                symbols=request_data.get("symbols", []),
                period=request_data.get("period", "1year"),
                analysis_type=request_data.get("analysis_type", "comprehensive"),
                confidence_level=request_data.get("confidence_level", 0.95),
                use_real_data=request_data.get("use_real_data", True)
            )
        
        return result
        
    except Exception as e:
        logger.error(f"Risk analysis failed: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Risk analysis failed: {str(e)}"
        )

# Optional: Keep compatibility with old structure
app = router  # This allows main.py to import either 'router' or 'app'